version: '3'

services:

  nginx:
    restart: always
    build:
      context: .
      dockerfile: .docker/nginx_Dockerfile
    ports:
      - '8080:80'
      - '443:443'
    volumes:
      - sockets:/tmp/
      - ./odbx/static:/app/static
      - ./logs:/var/log/nginx
      - ~/keys:/keys/
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    networks:
      - nginx

  odbx:
    restart: always
    build:
      context: .
      dockerfile: .docker/odbx_Dockerfile
    environment:
      MAIN: main
      OPTIMADE_CONFIG_FILE: /app/optimade_config.json
    depends_on:
      - mongo
    volumes:
      - sockets:/tmp/
      - ./odbx/static:/app/static/
      - ./logs:/app/logs/
    networks:
      - nginx

  odbx_rest:
    restart: always
    build:
      context: .
      dockerfile: .docker/odbx_rest_Dockerfile
    environment:
      MAIN: main
      OPTIMADE_CONFIG_FILE: /app/optimade_config.json
    depends_on:
      - mongo
    volumes:
      - sockets:/tmp/
      - ./logs:/app/logs/
    networks:
      - nginx

  odbx_rest_test:
    restart: always
    build:
      context: .
      dockerfile: .docker/odbx_rest_test_Dockerfile
    environment:
      MAIN: main
      OPTIMADE_CONFIG_FILE: /app/optimade_test_config.json
    depends_on:
      - mongo
    volumes:
      - sockets:/tmp/
      - ./logs:/app/logs/
      - /data/structure_repository/:/data/
    networks:
      - nginx

  odbx_index:
    restart: always
    build:
      context: .
      dockerfile: .docker/odbx_index_Dockerfile
    environment:
      OPTIMADE_CONFIG_FILE: /app/optimade_index_config.json
    volumes:
      - sockets:/tmp/
      - ./logs:/app/logs/
    networks:
      - nginx

  mongo:
    restart: always
    build:
      context: .
      dockerfile: .docker/mongo_Dockerfile
    command: ["mongod", "-f", "/etc/mongod.conf"]
    volumes:
      - sockets:/tmp/
      - ./logs:/var/logs/mongod/
      - /data/db/mongo:/data/db
    ports:
      - "27019:27017"
    networks:
      - nginx

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 24h & wait $${!}; done;'"
    networks:
      - nginx

volumes:
    sockets:

networks:
    nginx:
        external: true
